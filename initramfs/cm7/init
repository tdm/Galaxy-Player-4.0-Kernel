#!/stage1/sh
export _PATH="$PATH"
export PATH="/stage1"

set -x

date >>/boot.txt
exec >>/boot.txt 2>&1
cd /
mount -t proc proc /proc
mount -t sysfs sysfs /sys

rm /init

#dd bs=512 if=/dev/block/mtdblock2 of=/stage1/boot.bin
bml_over_mtd dump kernel 72 reservoir 2004 /stage1/boot.bin

eval $(grep -m 1 -A 1 BOOT_IMAGE_OFFSETS /stage1/boot.bin | tail -n 1)

load_offset=$boot_offset
load_len=$boot_len

# The buyer code is needed for the touch screen driver, so go ahead and
# copy all of the efs data now.
mount -t yaffs2 /dev/block/mtdblock0 /efs
if test -e /efs/buyer_code.dat ; then
	cat /efs/buyer_code.dat > /sys/firmware/efs/buyer_code
fi
if test -e /efs/imei/bt.txt ; then
	cat /efs/imei/bt.txt > /sys/firmware/efs/bt_addr
fi
umount /efs
rm -rf /efs

# Load the touch screen driver now so we don't need to load it in both
# the main and recovery init scripts.
insmod /lib/modules/qt602240.ko

if grep -q bootmode=2 /proc/cmdline ; then
	# recovery boot
	load_offset=$recovery_offset
	load_len=$recovery_len

	# disable lpm
	echo 0 > /sys/class/power_supply/battery/charging_mode_booting
fi
# XXX: until /cache is removed from initramfs.list
rm -rf /cache

dd bs=512 if=/stage1/boot.bin skip=$load_offset count=$load_len | zcat | cpio -i

if grep -q 1 /sys/class/power_supply/battery/charging_mode_booting ; then
	# low power mode
	cp lpm.rc init.rc
fi

umount /sys
umount /proc
date >> /boot.txt

mount -t vfat /dev/block/mmcblk0p1 /emmc
cp /boot.txt /emmc/boot.txt
umount /emmc
rm -rf /emmc

rm -rf /dev/*
rm -rf /stage1 

export PATH="${_PATH}"

exec /init
